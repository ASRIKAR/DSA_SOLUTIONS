import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Queue;
import java.util.*;
/*************************************************************

    Following is the Binary Tree node structure:

    class BinaryTreeNode<Integer> {
        int data;
        BinaryTreeNode<Integer> left;
        BinaryTreeNode<Integer> right;
        public BinaryTreeNode(int data) {
            this.data = data;
        }
    }

*************************************************************/

public class Solution {
     static class Pair {
        BinaryTreeNode<Integer> node;
        int level;

        Pair(BinaryTreeNode<Integer> node, int level) {
            this.node = node;
            this.level = level;
        }
    }
    
    public static ArrayList<Integer> printRightView(BinaryTreeNode<Integer> root) {
    ArrayList<Integer> result = new ArrayList<>();
    if (root == null) {
        return result;
    }

    Queue<Pair> queue = new LinkedList<>();
    queue.add(new Pair(root, 0));

    while (!queue.isEmpty()) {
        int levelNodes = queue.size();
        BinaryTreeNode<Integer> prevNode = null;

        for (int i = 0; i < levelNodes; i++) {
            Pair pair = queue.poll();
            BinaryTreeNode<Integer> currentNode = pair.node;
            int level = pair.level;

            // If it's the last node at the current level, add it to the result
            if (i == levelNodes - 1) {
                result.add(currentNode.data);
            }

            if (currentNode.left != null) {
                queue.add(new Pair(currentNode.left, level + 1));
            }
            if (currentNode.right != null) {
                queue.add(new Pair(currentNode.right, level + 1));
            }
        }
    }

    return result;
}


}
