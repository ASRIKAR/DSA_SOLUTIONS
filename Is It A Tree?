import java.util.*;

public class Solution {
	public static class pair{
		int first;
		int second;
		pair(int first,int second){
			this.first = first;
			this.second = second;
		}
	}

	public static boolean isTree(ArrayList<ArrayList<Integer>> adj, int V) {
	    int []vis = new int[V];
		Queue<pair> q = new LinkedList<>();
		vis[0] = 1;
		q.add(new pair(0, -1));
		while(!q.isEmpty()){
			int CurrNode = q.peek().first;
			int prevNode = q.peek().second;
			q.poll();
			for(int it : adj.get(CurrNode)){
				if(vis[it] == 0){
					vis[it] = 1;
					q.add(new pair(it,CurrNode));
				}
				else if(vis[it] == 1 && it != prevNode){
					return false;
				} 
			}

		}
		for(int i =0;i<V;i++){
			if(vis[i] != 1){
				return false;
			}
		}
		return true;
	}

    // Do not change this part of the code. You only need to complete the isTree function above.
	public static void main(String[] args) {

		Scanner s = new Scanner(System.in);
		int V = s.nextInt();
		int E = s.nextInt();

		//adjacency list
		ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
		for(int i =0; i<V; i++) {
			ArrayList<Integer> list = new ArrayList<>();
			adj.add(list);
		}

		//add edges to list
		for(int i = 0; i < E; i++) {
			int x = s.nextInt();
			int y = s.nextInt();
			adj.get(x).add(y);
			adj.get(y).add(x);
		}

		if(isTree(adj, V))
			System.out.println("True");
		else {
			System.out.println("False");
		}
	}

}
