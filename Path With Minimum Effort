class Solution {
    public static class pair {
        int first;
        int second;
        int third;

        pair(int first, int second, int third) {
            this.first = first;
            this.second = second;
            this.third = third;
        }
    }

    int MinimumEffort(int[][] heights) {
        int n = heights.length;
        int m = heights[0].length;
        int[][] dis = new int[n][m];
        PriorityQueue<pair> pq = new PriorityQueue<>((x, y) -> x.third - y.third);
        
        for (int[] row : dis) {
            Arrays.fill(row, Integer.MAX_VALUE);
        }
        
        dis[0][0] = 0;
        pq.offer(new pair(0, 0, 0));
        
        int[] disrow = {0, -1, 0, 1};
        int[] discol = {-1, 0, 1, 0};
        
        while (!pq.isEmpty()) {
            int row = pq.peek().first;
            int col = pq.peek().second;
            int distance = pq.peek().third;
            pq.poll();
            
            if (row == n - 1 && col == m - 1) {
                return distance;
            }
            
            for (int i = 0; i < 4; i++) {
                int adjrow = row + disrow[i];
                int adjcol = col + discol[i];
                
                if (adjrow >= 0 && adjrow < n && adjcol >= 0 && adjcol < m) {
                    int newDistance = Math.max(distance, Math.abs(heights[adjrow][adjcol] - heights[row][col]));
                    if (newDistance < dis[adjrow][adjcol]) {
                        dis[adjrow][adjcol] = newDistance;
                        pq.offer(new pair(adjrow, adjcol, newDistance));
                    }
                }
            }
        }
        return 0;
    }
}
