class Solution
{
    public static class pair{
        String first;
        int second;
        pair(String first,int second){
            this.first = first;
            this.second = second;
        }
    }
    public int wordLadderLength(String startWord, String targetWord, String[] wordList)
    {
        Queue<pair> q = new LinkedList<>();
        Set<String> st = new HashSet<>();
        q.add(new pair(startWord, 1));
        for(int i =0;i<wordList.length;i++){
            st.add(wordList[i]);
        }
        st.remove(startWord);
        while(!q.isEmpty()){
            String word  = q.peek().first;
            int steps = q.peek().second;
            q.poll();
            if(word.equals(targetWord)){
                return steps;
            }
            for(int i = 0;i< word.length();i++){
                for(char ch = 'a' ; ch <= 'z';ch++){
                    char[] arr = word.toCharArray();
                    arr[i] = ch;
                    String newString = new String(arr);
                    if(st.contains(newString)){
                        q.add(new pair(newString,steps+1));
                        st.remove(newString);
                    }
                }
            }
        }
        return 0;
    }
}
