
class Solution
{
    public static class pair{
        int distance;
        int node;
        pair(int distance,int node){
            this.distance = distance;
            this.node = node;
        }
    }
    //Function to find the shortest distance of all the vertices
    //from the source vertex S.
    static int[] dijkstra(int V, ArrayList<ArrayList<ArrayList<Integer>>> adj, int S)
    {
       int [] dis = new int[V];
       PriorityQueue<pair> pq = new PriorityQueue<pair>((x,y) -> x.distance - y.distance);
       Arrays.fill(dis,Integer.MAX_VALUE);
       dis[S] = 0;
       pq.add(new pair(0,S));
       while(!pq.isEmpty()){
        //   int dist = pq.peek().distance;
           int node= pq.peek().node;
           pq.remove();
           for(ArrayList<Integer> p : adj.get(node)){
               int wt = p.get(1);
               int adjnode = p.get(0);
               if(dis[adjnode] > dis[node] + wt){
                   dis[adjnode] = dis[node] + wt;
                   pq.offer(new pair(dis[adjnode],adjnode));
               }
           }
       }
       return dis;
    }
}
