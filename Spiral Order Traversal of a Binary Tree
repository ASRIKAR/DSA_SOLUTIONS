import java.util.*;

public class Solution {
    public static ArrayList<Integer> spiralOrder(BinaryTreeNode<Integer> root) {
		    ArrayList<Integer> a = new ArrayList<>();
		if(root == null){
			return a;
		}

        Queue<BinaryTreeNode<Integer>> q = new LinkedList<>();
        boolean flag = true;
        q.add(root);
        
        while (!q.isEmpty()) {
            int levelSize = q.size();
            Stack<BinaryTreeNode<Integer>> s = new Stack<>();
            
            for (int i = 0; i < levelSize; i++) {
                BinaryTreeNode<Integer> Node = q.poll();
                
                if (flag) {
                    a.add(Node.data);
                } else {
                    s.push(Node);
                }
                
                if (Node.left != null) {
                    q.add(Node.left);
                }
                if (Node.right != null) {
                    q.add(Node.right);
                }
            }
            
            while (!s.isEmpty()) {
                a.add(s.pop().data);
            }
            
            flag = !flag;
        }
        
        return a;
    }
}
