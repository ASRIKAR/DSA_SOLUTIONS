
class Solution {
    class DisjointSet {
        int[] parent;
        int[] rank;
    
        public DisjointSet(int size) {
            parent = new int[size];
            rank = new int[size];
    
            for (int i = 0; i < size; i++) {
                parent[i] = i;
                rank[i] = 1;
            }
        }
    
        public int find(int x) {
            if (parent[x] == x) {
                return x;
            }
            return parent[x] = find(parent[x]);
        }
    
        public boolean union(int x, int y) {
            int rootX = find(x);
            int rootY = find(y);
    
            if (rootX == rootY) {
                return false; // They are already in the same set
            }
    
            if (rank[rootX] < rank[rootY]) {
                parent[rootX] = rootY;
            } else if (rank[rootX] > rank[rootY]) {
                parent[rootY] = rootX;
            } else {
                parent[rootY] = rootX;
                rank[rootX]++;
            }
    
            return true;
        }
    }
    
    public List<Integer> numOfIslands(int n, int m, int[][] operators) {
        int[][] grid = new int[n][m];
        int[] adjR = {0, -1, 0, 1};
        int[] adjC = {-1, 0, 1, 0};
        List<Integer> ans = new ArrayList<>();
        DisjointSet uf = new DisjointSet(n * m);
        int count = 0;
    
        for (int[] arr : operators) {
            int x = arr[0];
            int y = arr[1];
    
            if (grid[x][y] == 0) {
                grid[x][y] = 1;
                count++;
    
                for (int i = 0; i < 4; i++) {
                    int adjRow = x + adjR[i];
                    int adjCol = y + adjC[i];
    
                    if (adjRow >= 0 && adjRow < n && adjCol >= 0 && adjCol < m && grid[adjRow][adjCol] == 1) {
                        if (uf.union(x * m + y, adjRow * m + adjCol)) {
                            count--;
                        }
                    }
                }
            }
    
            ans.add(count);
        }
    
        return ans;
    }
}
