import java.util.* ;
import java.util.concurrent.LinkedBlockingDeque;
import java.io.*; 
/*
	Following is the class used to represent the object/node of the Binary Tree

	class BinaryTreeNode<T> {
	    T data;
	    BinaryTreeNode<T> left;
	    BinaryTreeNode<T> right;

	    public BinaryTreeNode(T data) {
	        this.data = data;
	    }
	}
*/
public class Solution {
	public static List<Integer> zigZagTraversal(BinaryTreeNode<Integer> root) {
		// Write your code here!
		List<Integer> a = new ArrayList<>();
		if(root == null){
			return a;
		}
		Queue<BinaryTreeNode<Integer>> q = new LinkedList<>();
		boolean flag = true;
		q.add(root);
		while(!q.isEmpty()){
			int n = q.size();
			Stack<Integer> s = new Stack<>();
			for(int i =0;i<n;i++){
				BinaryTreeNode<Integer> curr = q.poll();
				if(flag){
					a.add(curr.data);
				}
				else{
					s.push(curr.data);
				}
				if(curr.left != null){
					q.add(curr.left);
				}
				if(curr.right != null){
					q.add(curr.right);
				}
			}
			while(!s.isEmpty()){
				a.add(s.pop());
			}
			flag = !flag;
		}
		return a;
	}
}
