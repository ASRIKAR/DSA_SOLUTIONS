class Solution
{
    
    public static boolean isCycle(int i , int [] vis ,ArrayList<ArrayList<Integer>>adj){
  
        Queue<Integer> q = new LinkedList<>();
        q.add(i);
        vis[i] =0;
        while(!q.isEmpty()){
            int node = q.poll();
            for(int it : adj.get(node)){
                if(vis[it] == -1){
                    vis[it] = (vis[node] == 0) ? 1 : 0;
                    q.add(it);
                }
                else if(vis[it] == vis[node]){
                    return false;
                }
            }
        }
        return true;
    }
    
    public boolean isBipartite(int V, ArrayList<ArrayList<Integer>>adj)
    {
        int vis [] = new int[V];
        Arrays.fill(vis,-1);
        for(int i =0;i < V;i++){
            if(vis[i] == -1){
                if(isCycle(i,vis,adj) == false){
                    return false;
                }
            }
        }
        return true;
       
    }
}
