class Solution {
      int findCity(int n, int m, int[][] edges,int distanceThreshold)
      {
          int  [][] dis = new int[n][n];
          for(int [] row : dis){
              Arrays.fill(row,Integer.MAX_VALUE);
          }
          for(int i= 0;i<m;i++){
              int u = edges[i][0];
              int  v = edges[i][1];
              int wt = edges[i][2];
              dis[u][v] = wt;
              dis[v][u] = wt;
          }
          for(int k =0;k<n;k++){
              dis[k][k] = 0;
              for(int i =0;i<n;i++){
                  for(int j =0;j<n;j++){
                      if(dis[i][k] == Integer.MAX_VALUE || dis[k][j] == Integer.MAX_VALUE){
                          continue;
                      }
                      dis[i][j] = Math.min(dis[i][j] , dis[i][k] + dis[k][j]);
                  }
              }
          }
          int cntcity = n;
          int crcity = -1;
          for(int i =0;i<n;i++){
              int count =0;
              for(int j = 0;j< n;j++){
                  if(dis[i][j] <= distanceThreshold){
                      count++;
                  }
              }
              if(count <= cntcity){
                  cntcity = count;
                  crcity = i;
              }
          }
          return crcity;
      }
}
