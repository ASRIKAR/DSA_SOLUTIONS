class Solution {
    public static boolean isCycle(int i , int [] vis,int [] pathvis,int [] check,List<List<Integer>> adj){
        vis[i] = 1;
        pathvis[i] = 1;
        check[i] = 0;
        for(int it : adj.get(i)){
            if(vis[it] == 0){
                if(isCycle(it,vis,pathvis,check,adj)){
                    return true;
                }
            }
            else if(pathvis[it] == 1){
                check[i] =  0;
                return true;
            }
        }
        pathvis[i] = 0;
        check[i] =1;
        return false;
    }
    List<Integer> eventualSafeNodes(int V, List<List<Integer>> adj) {
        int  [] vis = new int[V];
        int  [] pathvis = new int[V];
        int check[] = new int[V];
        List<Integer> a = new ArrayList<>();
        for(int i= 0; i<V; i++){
            if(vis[i] == 0){
                isCycle(i,vis,pathvis,check,adj);
            }
        }
        for(int i =0;i< V;i++){
            if(check[i] ==1){
                a.add(i);
            }
        }
        return a;
    }
}
