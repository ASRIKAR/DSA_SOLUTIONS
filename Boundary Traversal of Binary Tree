import java.util.*;
import java.util.ArrayList;
import java.util.List;

public class Solution {
    public static void leftBoundary(TreeNode root,List<Integer> l){
        if(root == null || (root.left== null && root.right == null )){
            return;
        }
        l.add(root.data);
        if(root.left != null)
        leftBoundary(root.left,l);
        else
        leftBoundary(root.right,l);
    }
    public static void leafe(TreeNode root,List<Integer> l){
        if(root.left == null && root.right == null){
            l.add(root.data);
            return;
        }
        if(root.left != null)
        leafe(root.left, l);
        if(root.right != null)
        leafe(root.right,l);
    }
    public static void rightBoundary(TreeNode root,Stack<Integer> s){
        if(root == null || (root.left== null && root.right == null )){
            return;
        }
        s.push(root.data);
        if(root.right != null)
        rightBoundary(root.right,s);
        else
        rightBoundary(root.left,s);
    }
    public static List<Integer> traverseBoundary(TreeNode root){
        List<Integer> l  = new ArrayList<>();
        l.add(root.data);
        leftBoundary(root.left,l);
        leafe(root,l);
        Stack<Integer> s = new Stack<>();
        rightBoundary(root.right,s);
        while(!s.isEmpty()){
            l.add(s.pop());
        }
        return l;
    }

}
